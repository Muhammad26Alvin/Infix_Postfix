#include <iostream>
#include <vector>
#include <string>
#include <stack>
#include <sstream>
#include <cmath>  
using namespace std;

bool isOperator(const string& token) {
    return token == "+" || token == "-" || token == "*" || token == "/" || token == "%";
}

vector<string> strToInfix(string& inputString) {
    vector<string> expression;
    string num = "";
    int n = inputString.length();

    for (int i = 0; i < n; ++i) {
        char current = inputString[i];

        if (current == ' ') continue;

        if ((current >= '0' && current <= '9') || (current == '.' && !num.empty()) ||
            (current == '-' && (i == 0 || inputString[i - 1] == '(' || inputString[i - 1] == ' ' || isOperator(string(1, inputString[i - 1]))))) {
            num += current;
            while (i + 1 < n && ((inputString[i + 1] >= '0' && inputString[i + 1] <= '9') || inputString[i + 1] == '.')) {
                num += inputString[++i];
            }
            expression.push_back(num);
            num = "";
        } else if (current == '+' || current == '-' || current == '*' ||
                   current == '/' || current == '%' || current == '(' || current == ')') {
            expression.push_back(string(1, current));
        }
    }
    return expression;
}

vector<string> handleNegative(vector<string>& expression) {
    vector<string> result;
    int n = expression.size();

    for (int i = 0; i < n; ++i) {
        if (expression[i] == "-" && (i == 0 || expression[i - 1] == "(" || isOperator(expression[i - 1]))) {
            if (i + 1 < n && ((expression[i + 1][0] >= '0' && expression[i + 1][0] <= '9') || expression[i + 1][0] == '.')) {
                result.push_back("-" + expression[i + 1]);
                i++;
            } else {
                result.push_back("-1");
                result.push_back("*");
            }
        } else {
            result.push_back(expression[i]);
        }
    }

    return result;
}

int getPrecedence(const string& op) {
    if (op == "+" || op == "-") return 1;
    if (op == "*" || op == "/" || op == "%") return 2;
    return 0;
}

vector<string> infixToPostfix(vector<string>& infix) {
    vector<string> postfix;
    stack<string> opStack;

    for (const string& token : infix) {
        if ((token[0] >= '0' && token[0] <= '9') || (token[0] == '-' && token.length() > 1 && ((token[1] >= '0' && token[1] <= '9') || token[1] == '.'))) {
            postfix.push_back(token);
        } else if (token == "(") {
            opStack.push(token);
        } else if (token == ")") {
            while (!opStack.empty() && opStack.top() != "(") {
                postfix.push_back(opStack.top());
                opStack.pop();
            }
            if (!opStack.empty()) {
                opStack.pop();
            }
        } else if (isOperator(token)) {
            while (!opStack.empty() && getPrecedence(opStack.top()) >= getPrecedence(token)) {
                postfix.push_back(opStack.top());
                opStack.pop();
            }
            opStack.push(token);
        }
    }

    while (!opStack.empty()) {
        postfix.push_back(opStack.top());
        opStack.pop();
    }

    return postfix;
}

double evaluatePostfix(const vector<string>& postfix) {
    stack<double> evalStack;

    for (const string& token : postfix) {
        if (isOperator(token)) {
            double b = evalStack.top();
            evalStack.pop();
            double a = evalStack.top();
            evalStack.pop();

            if (token == "+") evalStack.push(a + b);
            else if (token == "-") evalStack.push(a - b);
            else if (token == "*") evalStack.push(a * b);
            else if (token == "/") {
                if (b == 0) {
                    cerr << "Error: Division by zero" << endl;
                    exit(EXIT_FAILURE);
                }
                evalStack.push(a / b);
            } else if (token == "%") evalStack.push(fmod(a, b));
        } else {
            evalStack.push(stod(token));
        }
    }

    return evalStack.top();
}

int main() {
    string inputString;
    getline(cin, inputString);

    vector<string> expression = strToInfix(inputString);
    vector<string> finalExpression = handleNegative(expression);
    vector<string> postfixExpression = infixToPostfix(finalExpression);

    double result = evaluatePostfix(postfixExpression);
    cout << result << endl;

    return 0;
}
